import sys

import guarddog.analyzer.sourcecode as sourcecode_analyzers
from guarddog.ecosystems import ECOSYSTEM, get_friendly_name
import guarddog.analyzer.metadata as metadata_analyzers

START_MARKER = "<!-- BEGIN_RULE_LIST -->\n"
END_MARKER = "<!-- END_RULE_LIST -->\n"


def generate_docs() -> str:
    output = ''
    for ecosystem in ECOSYSTEM:
        output += '### ' + get_friendly_name(ecosystem)
        output += '\n\n'
        output += 'Source code heuristics:\n\n'
        output += '| **Heuristic** | **Description** |\n'
        output += '|:-------------:|:---------------:|\n'
        for rule in sourcecode_analyzers.SOURCECODE_RULES[ecosystem]:
            description = rule.get("metadata", {}).get("description")
            if description is None:
                description = rule.get('message')
            description = description.replace("\n", "")
            output += f'| {rule["id"]} | {description} |\n'

        output += '\nMetadata heuristics:\n\n'
        output += '| **Heuristic** | **Description** |\n'
        output += '|:-------------:|:---------------:|\n'
        rules = metadata_analyzers.get_metadata_detectors(ecosystem)
        for ruleName in rules:
            rule = rules[ruleName]
            output += f"| {rule.get_name()} | {rule.get_description()} |\n"

        output += "\n\n"
    return output


def inject_docs(file_name: str, new_docs: str):
    with open(file_name, 'r') as f:
        contents = "".join(f.readlines())

    start = end = 0
    try:
        start = contents.index(START_MARKER)
        end = contents.index(END_MARKER)
    except ValueError:
        sys.stderr.write(f"Unable to inject docs in {file_name}, missing start or end marker")
        exit(1)

    before = contents[0:start]
    after = contents[end:]

    new_contents = before + START_MARKER + new_docs + after # 'after' already contains the end marker
    with open(file_name, 'w') as f:
        f.write(new_contents)
    print(f'Wrote autogenerated docs to {file_name}')


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(generate_docs())
    elif len(sys.argv) == 2:
        file = sys.argv[1]
        print(f'Generating docs and injecting into {file}')
        inject_docs(file, generate_docs())



